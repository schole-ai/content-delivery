In computer science, specifically in algorithms related to pathfinding, a heuristic function is said to be admissible if it never overestimates the cost of reaching the goal, i.e. the cost it estimates to reach the goal is not higher than the lowest possible cost from the current point in the path. In other words, it should act as a lower bound.
It is related to the concept of consistent heuristics. While all consistent heuristics are admissible, not all admissible heuristics are consistent.


== Search algorithms ==
An admissible heuristic is used to estimate the cost of reaching the goal state in an informed search algorithm. In order for a heuristic
to be admissible to the search problem, the estimated cost must always be lower than or equal to the actual cost of reaching the goal state. 
The search algorithm uses the admissible heuristic to find an estimated 
optimal path to the goal state from the current node. 
For example, in A* search the evaluation function (where 

  
    
      
        n
      
    
    {\displaystyle n}
  
 is the current node) is:

  
    
      
        f
        (
        n
        )
        =
        g
        (
        n
        )
        +
        h
        (
        n
        )
      
    
    {\displaystyle f(n)=g(n)+h(n)}
  

where

  
    
      
        f
        (
        n
        )
      
    
    {\displaystyle f(n)}
  
 = the evaluation function.

  
    
      
        g
        (
        n
        )
      
    
    {\displaystyle g(n)}
  
 = the cost from the start node to the current node

  
    
      
        h
        (
        n
        )
      
    
    {\displaystyle h(n)}
  
 = estimated cost from current node to goal.

  
    
      
        h
        (
        n
        )
      
    
    {\displaystyle h(n)}
  
 is calculated using the heuristic 
function. With a non-admissible heuristic, the A* algorithm could 
overlook the optimal solution to a search problem due to an 
overestimation in 
  
    
      
        f
        (
        n
        )
      
    
    {\displaystyle f(n)}
  
.


== Formulation ==

  
    
      
        n
      
    
    {\displaystyle n}
  
 is a node

  
    
      
        h
      
    
    {\displaystyle h}
  
 is a heuristic

  
    
      
        h
        (
        n
        )
      
    
    {\displaystyle h(n)}
  
 is cost indicated by 
  
    
      
        h
      
    
    {\displaystyle h}
  
 to reach a goal from 
  
    
      
        n
      
    
    {\displaystyle n}
  

  
    
      
        
          h
          
            ∗
          
        
        (
        n
        )
      
    
    {\displaystyle h^{*}(n)}
  
 is the optimal cost to reach a goal from 
  
    
      
        n
      
    
    {\displaystyle n}
  

  
    
      
        h
        (
        n
        )
      
    
    {\displaystyle h(n)}
  
 is admissible if, 
  
    
      
        ∀
        n
      
    
    {\displaystyle \forall n}
  

  
    
      
        h
        (
        n
        )
        ≤
        
          h
          
            ∗
          
        
        (
        n
        )
      
    
    {\displaystyle h(n)\leq h^{*}(n)}
  


== Construction ==
An admissible heuristic can be derived from a relaxed
version of the problem, or by information from pattern databases that store exact solutions to subproblems of the problem, or by using inductive learning methods.


== Examples ==
Two different examples of admissible heuristics apply to the fifteen puzzle problem:

Hamming distance
Manhattan distance
The Hamming distance is the total number of misplaced tiles. It is clear that this heuristic is admissible since the total number of moves to order the tiles correctly is at least the number of misplaced tiles (each tile not in place must be moved at least once). The cost (number of moves) to the goal (an ordered puzzle) is at least the Hamming distance of the puzzle.
The Manhattan distance of a puzzle is defined as:

  
    
      
        h
        (
        n
        )
        =
        
          ∑
          
            all tiles
          
        
        
          
            d
            i
            s
            t
            a
            n
            c
            e
          
        
        (
        
          tile, correct position
        
        )
      
    
    {\displaystyle h(n)=\sum _{\text{all tiles}}{\mathit {distance}}({\text{tile, correct position}})}
  

Consider the puzzle below in which the player wishes to move each tile such that the numbers are ordered. The Manhattan distance is an admissible heuristic in this case because every tile will have to be moved at least the number of spots in between itself and its correct position.

The subscripts show the Manhattan distance for each tile. The total Manhattan distance for the shown puzzle is:

  
    
      
        h
        (
        n
        )
        =
        3
        +
        1
        +
        0
        +
        1
        +
        2
        +
        3
        +
        3
        +
        4
        +
        3
        +
        2
        +
        4
        +
        4
        +
        4
        +
        1
        +
        1
        =
        36
      
    
    {\displaystyle h(n)=3+1+0+1+2+3+3+4+3+2+4+4+4+1+1=36}
  


== Optimality proof ==
If an admissible heuristic is used in an algorithm that, per iteration, progresses only the path of lowest evaluation (current cost + heuristic) of several candidate paths, terminates the moment its exploration reaches the goal and, crucially, never closes all optimal paths before terminating (something that's possible with A* search algorithm if special care isn't taken), then this algorithm can only terminate on an optimal path. To see why, consider the following proof by contradiction:
Assume such an algorithm managed to terminate on a path T with a true cost Ttrue greater than the optimal path S with true cost Strue. This means that before terminating, the evaluated cost of T was less than or equal to the evaluated cost of S (or else S would have been picked). Denote these evaluated costs Teval and Seval respectively. The above can be summarized as follows,

Strue < Ttrue
Teval ≤ Seval
If our heuristic is admissible it follows that at this penultimate step Teval = Ttrue because any increase on the true cost by the heuristic on T would be inadmissible and the heuristic cannot be negative. On the other hand, an admissible heuristic would require that Seval ≤ Strue which combined with the above inequalities gives us Teval < Ttrue and more specifically Teval ≠ Ttrue. As Teval and Ttrue cannot be both equal and unequal our assumption must have been false and so it must be impossible to terminate on a more costly than optimal path.
As an example, let us say we have costs as follows:(the cost above/below a node is the heuristic, the cost at an edge is the actual cost)

 0     10   0   100   0
START ----  O  ----- GOAL
 |                   |
0|                   |100
 |                   | 
 O ------- O  ------ O
100   1    100   1   100

So clearly we would start off visiting the top middle node, since the expected total cost, i.e. 
  
    
      
        f
        (
        n
        )
      
    
    {\displaystyle f(n)}
  
, is 
  
    
      
        10
        +
        0
        =
        10
      
    
    {\displaystyle 10+0=10}
  
. Then the goal would be a candidate, with 
  
    
      
        f
        (
        n
        )
      
    
    {\displaystyle f(n)}
  
 equal to 
  
    
      
        10
        +
        100
        +
        0
        =
        110
      
    
    {\displaystyle 10+100+0=110}
  
. Then we would clearly pick the bottom nodes one after the other, followed by the updated goal, since they all have 
  
    
      
        f
        (
        n
        )
      
    
    {\displaystyle f(n)}
  
 lower than the 
  
    
      
        f
        (
        n
        )
      
    
    {\displaystyle f(n)}
  
 of the current goal, i.e. their 
  
    
      
        f
        (
        n
        )
      
    
    {\displaystyle f(n)}
  
 is 
  
    
      
        100
        ,
        101
        ,
        102
        ,
        102
      
    
    {\displaystyle 100,101,102,102}
  
. So even though the goal was a candidate, we could not pick it because there were still better paths out there. This way, an admissible heuristic can ensure optimality.
However, note that although an admissible heuristic can guarantee final optimality, it is not necessarily efficient.


== See also ==
Consistent heuristic
Heuristic function
Search algorithm


== References ==